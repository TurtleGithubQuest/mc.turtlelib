plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version "1.9.23"
    id 'com.github.johnrengelman.shadow' version "7.1.2"
}

group = 'dev.turtle'
version = '0.0.4c'
pluginName = "TurtleLib"

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.20.2-R0.1-SNAPSHOT"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "com.typesafe:config:1.4.3"
    implementation "com.google.zxing:core:3.4.1" //size: +500kb
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
	withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version, pluginName: pluginName]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

publishing {
    publications {
        library(MavenPublication) {
            from components.kotlin
        }
    }
}

kotlin {
    jvmToolchain(17)
}

tasks.register('projectVersion') {
    doLast {
        println project.version
    }
}

tasks {
    var buildDirectoryPath = project.findProperty("buildDirectory") ?: "build/libs"
    var buildDirectory = file(buildDirectoryPath)
    jar {
        archiveFileName = "$pluginName-${version}.jar"
        destinationDirectory = file(buildDirectory)
    }
    shadowJar {
        archiveFileName = "$pluginName-${version}-fat.jar"
        destinationDirectory = file(buildDirectory)
    }
}
